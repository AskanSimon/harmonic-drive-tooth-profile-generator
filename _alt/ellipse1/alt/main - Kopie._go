package main

import (
    "bytes"
    "fmt"
    "log"
    "math"
)

func main() {

    
    var b bytes.Buffer
    b.WriteString("<svg width=\"700\" height=\"700\" xmlns=\"http://www.w3.org/2000/svg\">")
    b.WriteString("<g stroke=\"black\" stroke-width=\"0.5\" fill=\"none\">")

    ellipse := Ellipse{
        Point{350.0, 280.0},
        //Point{0.0, 0.0},
        250.0,
        150.0,
    }
    teeth := 200 // (200 - 202)/200 = -0.01 oder 1/100
    toothArc := ellipse.Circumference() / float64(teeth)    

// --
    // https://www.youtube.com/watch?v=ctxKuCeRqaE
    // B finden sqrt(-a2+c2)
    // Todo vorab check welche seite laenger ist
    testB := math.Sqrt(math.Pow(ellipse.X/2.0, 2)+math.Pow(ellipse.Y/2.0, 2))

    test2 := Point{0, -testB}
    test2.Rotate(63.0) 
    test2.X += ellipse.X
    test2.Y += ellipse.Y
    printDot(&b, Point{test2.X, test2.Y}, "")
    fmt.Println(test2)

    test3 := Point{0, testB}
    test3.Rotate(63.0)
    test3.X += ellipse.X
    test3.Y += ellipse.Y
    printDot(&b, Point{test3.X, test3.Y}, "")
    fmt.Println(test3)
    
    // https://www.triangle-calculator.com/de/?what=vc&a=549.6828914759467&a1=178.256484964371&3dd=3D&a2=0&b=150.31710852405325&b1=381.743515035629&b2=0&c=494.8613120633239&c1=362.87077760990394&c2=0&submit=Berechnen&3d=0
    
    /*
    
    {549.6828914759467 178.256484964371}
    {150.31710852405325 381.743515035629}
    {494.8613120633239 362.87077760990394}
    
    */
    
    fmt.Println((360.0 - 2*(109.674)) / 4)
// --
    // Die Drehung der Ellipse
    for rotate := 63.0; rotate <= 117.0; rotate += 63.0 {
    
        p, pLast := Point{}, Point{}
        first := false
        total := 0.0
        counter := 0

        for i := 0.0; i <= 360.0; i += 0.0001 {
            p = ellipse.PointInAbsoluteAngleRotated(i, rotate)

            if first {
                first = false
                pLast = p
                b.WriteString(fmt.Sprintf("<circle id=\"%f\" cx=\"%f\" cy=\"%f\"  r=\"1\"  />\n", i, p.X, p.Y))
                counter++
                continue
            }

            total += p.DistanceTo(&pLast) / 2
            pLast = p

            if total >= (float64(counter)*toothArc) {
                if counter == 17 {                
                    b.WriteString(fmt.Sprintf("<circle id=\"%f-%d\" cx=\"%.14f\" cy=\"%.14f\" fill=\"red\" r=\"1\" />\n", i, counter, p.X, p.Y))                    
                    fmt.Println(p)
                }else {
                    b.WriteString(fmt.Sprintf("<circle id=\"%f-%d\" cx=\"%.14f\" cy=\"%.14f\" r=\"1\" />\n", i, counter, p.X, p.Y))
                }
                counter++
            }

            if counter == teeth {
                fmt.Println("teeth complete")
                break
            }
        }
    }

    printDot(&b, Point{350.0, 280.0}, "")
   
    fmt.Println("", ellipse.Circumference())

    b.WriteString("</g></svg>")

    err := writeSvg(b.Bytes())
    if err != nil {
        log.Fatal(err)
    }

}